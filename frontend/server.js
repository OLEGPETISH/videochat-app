import { WebSocketServer } from "ws";

const socket = new WebSocket(
  window.location.origin.replace(/^http/, "ws")
);

const clients = new Map();

wss.on("connection", (ws) => {
  console.log("üü¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è");

  ws.on("message", (message) => {
    try {
      const data = JSON.parse(message);

      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
      if (data.type === "join") {
        clients.set(ws, data.room);
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ: ${data.room}`);
        return;
      }

      const room = clients.get(ws);
      if (!room) return;

      // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      wss.clients.forEach((client) => {
        if (
          client !== ws &&
          client.readyState === client.OPEN &&
          clients.get(client) === room
        ) {
          client.send(JSON.stringify(data));
        }
      });
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    }
  });

  ws.on("close", () => {
    console.log("üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
    clients.delete(ws);
  });
});
