import { WebSocketServer } from "ws";
import http from "http";

const PORT = process.env.PORT || 10000;

// ะกะพะทะดะฐัะผ ะพะฑััะฝัะน HTTP ัะตัะฒะตั
const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("โ WebSocket server is running");
});

const wss = new WebSocketServer({ server });
console.log(`โ WebSocket ัะตัะฒะตั ะทะฐะฟััะบะฐะตััั ะฝะฐ ะฟะพััั ${PORT}`);

const clients = new Map();

wss.on("connection", (ws) => {
  console.log("๐ข ะะพะฒัะน ะฟะพะปัะทะพะฒะฐัะตะปั ะฟะพะดะบะปััะธะปัั");

  ws.on("message", (message) => {
    try {
      const data = JSON.parse(message);

      if (data.type === "join") {
        clients.set(ws, data.room);
        console.log(`๐ฅ ะะพะปัะทะพะฒะฐัะตะปั ะฟัะธัะพะตะดะธะฝะธะปัั ะบ ะบะพะผะฝะฐัะต: ${data.room}`);
        return;
      }

      const room = clients.get(ws);
      wss.clients.forEach((client) => {
        if (
          client.readyState === client.OPEN &&
          clients.get(client) === room
        ) {
          client.send(JSON.stringify(data));
        }
      });
    } catch (err) {
      console.error("โ ะัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐะฑะพัะบะต:", err);
    }
  });

  ws.on("close", () => {
    clients.delete(ws);
    console.log("๐ด ะะพะปัะทะพะฒะฐัะตะปั ะพัะบะปััะธะปัั");
  });
});

server.listen(PORT, "0.0.0.0", () => {
  console.log(`๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะธ ัะปััะฐะตั ะฟะพัั ${PORT}`);
});
